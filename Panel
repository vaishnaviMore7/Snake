import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import javax.swing.*;
import java.util.Random;


public class Panel  extends JPanel implements ActionListener{
	static final int width=600;
	static final int height=600;
	static final int size=25;
	static final int units =(width*height)/size;
	static final int delay=75;
	final int x[]=new int[units];
	final int y[]=new int[units];
	int bodyparts=6;
	int appleseat;
	int applex;
	int appley;
	char direction = 'R';
	boolean running=false;
	Timer timer;
	Random random;
     Panel(){
    	 random =new Random();
    	 this.setPreferredSize(new Dimension(width,height));
    	 this.setBackground(Color.black);
    	 this.setFocusable(true);
    	 this.addKeyListener(new MyKey());
    	 startGame();
    	 
    	 
     }
     
	public void startGame() {
		newapple();
		running =true;
		timer=new Timer(delay,this);
		timer.start();
    	 
     }
     public void paint(Graphics g) {
    	 super.paint(g);
    	 draw(g);
     }
     public void draw(Graphics g) {
    	 if(running) {
    	 for(int i=0;i<height/size;i++) {
    		 g.drawLine(i*size,0,i*size,height);
    		 g.drawLine(0,i*size,width,i*size);
    	 }
    	 g.setColor(Color.red);
    	 g.fillOval(applex,appley,size,size);
    	 
    	 for(int i=0;i<bodyparts;i++) {
    		 if(i==0) {
    			 g.setColor(Color.green);
    			 g.fillRect(x[i],y[i],size,size);
    		 }else {
    			 g.setColor(new Color(45,180,0));
    			 g.setColor(new Color(random.nextInt()));
    			 g.fillRect(x[i],y[i],size,size);
    		 }
    	 }
    	 g.setColor(Color.red);
    	 g.setFont(new Font ("InK Free",Font.BOLD,75));
    	 FontMetrics metrics1 = getFontMetrics(g.getFont());
    	 g.drawString("Score:"+appleseat,(width-metrics1.stringWidth("Score:"+appleseat))/2,g.getFont().getSize());
         
    	/* g.setColor(Color.red);
    	 g.setFont(new Font ("InK Free",Font.BOLD,75));
    	 FontMetrics metrics2= getFontMetrics(g.getFont());
    	 g.drawString("Game Over",(width-metrics2.stringWidth("Game Over"))/2,height/2);
    	 */
    	 }else {
    		 gameover(g);
    		 
    	 }
     }
     public void newapple() {
    	 applex =random.nextInt((int)(width/size))*size;
    	 appley =random.nextInt((int)(height/size))*size;
     }
     public void move() {
    	 for(int i=bodyparts;i>0;i--){
    		 x[i]=x[i-1];
    		 y[i]=y[i-1];
    	 }
    	 switch(direction) {
    	 case 'U':
    		 y[0] =y[0]-size;
    		 break;
    	 case 'D':
    		 y[0] =y[0]+size;
    		 break;
    	 case 'L':
    		 x[0] =x[0]-size;
    		 break;
    	 case 'R':
    		 x[0] =x[0]+size;
    		 break;	 
    	 }
    	 
     }
     public void checkApple() {
    	 if((x[0] == applex)&&(y[0]==appley)) {
    		 bodyparts++;
    		 appleseat++;
    		 newapple();
    	 }
    	 
     }
     public void checkCollision() {
    	 //this tracks if head collide with body
    	 for(int i= bodyparts;i>0;i--) {
    		 if((x[0] == x[i])&& (y[0] == y[i])) {
    			 running = false;
    			 
    		 }
    	 }
    	 
    	 // check if head touches left border
    	 if(x[0]<0) {
    		 running = false;
    	 }
    	 //check  if head touches right border
    	 if(x[0]> width) {
    		 running = false;
    	 }
    	 // check if head touches top border
    	 if(y[0]<0) {
    		 running = false;
    	 }
    	 //check if head touches bottom border
    	 if(y[0]> height) {
    		 running = false;
    	 }
    	 if(!running) {
    		 timer.stop();
    	 }
     }
     public void gameover(Graphics g) {
    	 g.setColor(Color.red);
    	 g.setFont(new Font ("InK Free",Font.BOLD,75));
    	 FontMetrics metrics = getFontMetrics(g.getFont());
    	 g.drawString("Game Over",(width-metrics.stringWidth("Game Over"))/2,height/2);
     }
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(running) {
			move();
			checkApple();
			checkCollision();
		}
		repaint();
		
	}
	public class MyKey extends KeyAdapter{
		public void KeyPressed(KeyEvent e) {
			switch(e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if(direction != 'R') {
					direction ='L';
				}
				break;
			case KeyEvent.VK_RIGHT:
				if(direction != 'L') {
					direction ='R';
				}
				break;
			case KeyEvent.VK_UP:
				if(direction != 'D') {
					direction ='U';
				}
				break;
			case KeyEvent.VK_DOWN:
				if(direction != 'U') {
					direction ='D';
				}
				break;
			}
			
		}
	}

}
